[include shell_command.cfg]
[include mainsail.cfg]

[exclude_object]


[virtual_sdcard]
path: /home/taran/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 9000
max_z_velocity: 15
max_z_accel: 300
square_corner_velocity: 6.0

[temperature_sensor CM4]
sensor_type: temperature_host

[force_move]
enable_force_move: True

[idle_timeout]
timeout: 1800

[resonance_tester]
probe_points: 60,60,30
#   A list of X, Y, Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
accel_chip: adxl345
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 133.33
#   Maximum frequency to test for resonances. The default is 133.33 Hz.
accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).

# [shaketune]
# result_folder: ~/printer_data/config/ShakeTune_results
# #    The folder where the results will be stored. It will be created if it doesn't exist.
# number_of_results_to_keep: 3
# #    The number of results to keep in the result_folder. The oldest results will
# #    be automatically deleted after each runs.
# keep_raw_csv: False
# #    If True, the raw CSV files will be kept in the result_folder alongside the
# #    PNG graphs. If False, they will be deleted and only the graphs will be kept.
# show_macros_in_webui: True
# #    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
# #    printer.cfg file. If you want to see the macros in the webui, set this to True.
# timeout: 300
# #    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.

[input_shaper]
shaper_freq_x: 66.6
shaper_type_x: mzv
damping_ratio_x: 0.067

shaper_freq_y: 60.4
shaper_type_y: ei
damping_ratio_y: 0.2256

[include reshelper.cfg]

# Manta M5P START

[mcu]
canbus_uuid: 6acb5acd94a7

[temperature_sensor M5P]
sensor_type: temperature_mcu
sensor_mcu: mcu

[stepper_x]
step_pin: PC8
dir_pin: PC9
enable_pin: !PA15
microsteps: 32
rotation_distance: 40
endstop_pin: tmc2240_stepper_x:virtual_endstop
position_endstop: 120
position_max: 120
homing_speed: 40
homing_retract_dist: 0

[stepper_y]
step_pin: PA10
dir_pin: PA14
enable_pin: !PA13
microsteps: 32
rotation_distance: 40
endstop_pin: tmc2240_stepper_y:virtual_endstop
position_endstop: 120
position_max: 120
homing_speed: 40
homing_retract_dist: 0

[stepper_z]
step_pin: PC6
dir_pin: !PC7                                                      # Remove the ! before PC5 if motor direction is inverted.
enable_pin: !PA9
rotation_distance: 8                                                # For T8x8 integrated lead screw
microsteps: 32
endstop_pin: ^PC3
position_endstop = 120
position_max: 120
position_min: 0
homing_speed: 20
second_homing_speed: 3.0
homing_retract_dist: 3.0

[tmc2240 stepper_x]
cs_pin: PD9
spi_bus: spi2
run_current: 1
interpolate: False
stealthchop_threshold: 0
diag0_pin: ^!PD3
driver_SGT: 2

[tmc2240 stepper_y]
cs_pin: PD8
spi_bus: spi2
run_current: 1
interpolate: False
stealthchop_threshold: 0
diag0_pin: ^!PD2
driver_SGT: 2

[tmc2240 stepper_z]
cs_pin: PB10
spi_bus: spi2
run_current: 0.37
interpolate: False
stealthchop_threshold: 0
diag1_pin: PC3

[heater_bed]
heater_pin: PA5
sensor_type: Generic 3950
sensor_pin: PA0
smooth_time: 3.0
#max_power: 0.6                                                     # Only needed for 100w pads
min_temp: 0
max_temp: 120
control: pid                                                        # Do PID calibration after initial checks
pid_kp: 63.348
pid_ki: 0.653
pid_kd: 1536.989

#pid_Kp=63.348 pid_Ki=0.653 pid_Kd=1536.989

[temperature_sensor Bed_heatpad_thermistor]
sensor_type: Generic 3950
sensor_pin: PA1
#min_temp:
#max_temp:
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.

[neopixel Bed_neopixel]
pin: PC11                            # Motherboard RGB Pin Definition  
chain_count: 8                      # Number of lamp beads  
color_order: GRB                   # colour sequence  
initial_RED: 0.25
initial_GREEN: 0.0
initial_BLUE: 0

[neopixel Daylight_neopixel]
pin: PC14                           # Motherboard RGB Pin Definition  
chain_count: 10                      # Number of lamp beads  
color_order: GRB                   # colour sequence  
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.5
  
# [led_effect panel_idle]  
# autostart: true                    #Automatic operation  
# frame_rate: 10                     #Refresh rate  
# leds:  
#    neopixel:Bed_neopixel               #Called RGBs  
# layers:  
#     comet  1 1 top (.5,0,.5),(.1,.1,0),(0,.5,.5)

[controller_fan Electronics_fan]
pin: PA3
#max_power: 0.8
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
fan_speed: 0.8
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver is active.
#   The default is 1.0
idle_timeout: 60
#   The amount of time (in seconds) after a stepper driver or heater
#   was active and the fan should be kept running. The default
#   is 30 seconds.
idle_speed: 0.5
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and
#   before the idle_timeout is reached. The default is fan_speed.
#heater:
stepper: stepper_x, stepper_y, stepper_z
#   Name of the config section defining the heater/stepper that this fan
#   is associated with. If a comma separated list of heater/stepper names
#   is provided here, then the fan will be enabled when any of the given
#   heaters/steppers are enabled. The default heater is "extruder", the
#   default stepper is all of them.

[heater_fan Filter_fan]
pin: PA4
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
heater: heater_bed
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
heater_temp: 60
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 0.8
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

[fan_generic Bed_fan]
pin: PA7

[temperature_sensor chamber]
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PA2
min_temp: 0
max_temp: 100
gcode_id: C


# Manta M5P END

# TMC Autotune

[autotune_tmc stepper_x]
motor: ldo-35sth52-1504ah
tuning_goal: performance
voltage: 24
sgt: 2

[autotune_tmc stepper_y]
motor: ldo-35sth52-1504ah
tuning_goal: performance
voltage: 24
sgt: 2

[autotune_tmc stepper_z]
motor: ldo-42sth25-1004cl200et
tuning_goal: performance
voltage: 24

[autotune_tmc extruder]
motor: ldo-36sth20-1004ahg-9T
tuning_goal: performance
voltage: 24

# EBB36 can toolhead START

[mcu EBBCan]
canbus_uuid: 09baf4cab872

[temperature_sensor EBB36]
sensor_type: temperature_mcu
sensor_mcu: EBBCan

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,z,y

[extruder]
step_pin: EBBCan: PD0
dir_pin: EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 16
rotation_distance: 47.088
gear_ratio: 9:1
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
# sensor_type: EPCOS 100K B57560G104F
# sensor_pin: EBBCan: PA3
control: pid
pid_Kp: 23.044
pid_Ki: 1.521
pid_Kd: 87.281
min_temp: 0
max_temp: 300

sensor_type:MAX31865
sensor_pin: EBBCan: PA4
spi_bus: spi1
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2

# PID parameters: pid_Kp=23.044 pid_Ki=1.521 pid_Kd=87.281

[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.600
interpolate: False
stealthchop_threshold: 0


[fan]
pin: EBBCan: PA0
off_below: 0.1

[heater_fan hotend_fan]
pin: EBBCan: PA1
heater: extruder
heater_temp: 50.0

[neopixel Hotend_RGB]
pin: EBBCan: PD3
chain_count: 3
color_order: GRB
initial_RED: 0.25
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0

[delayed_gcode settoolheadneopixel]
initial_duration: 1
gcode:
        SET_LED LED=Hotend_RGB RED=0.25 GREEN=0.25 BLUE=0.25 INDEX=1 TRANSMIT=0   # Nozzle light 1
        SET_LED LED=Hotend_RGB RED=0.25 GREEN=0.25 BLUE=0.25 INDEX=2 TRANSMIT=0   # Nozzle light 2
        SET_LED LED=Hotend_RGB RED=0.25 GREEN=0 BLUE=0 INDEX=3              # Logo

#[bltouch]
#sensor_pin: ^EBBCan:PB8
#control_pin: EBBCan:PB9

#[filament_switch_sensor switch_sensor]
#switch_pin: EBBCan:PB4

#[filament_motion_sensor motion_sensor]
#switch_pin: ^EBBCan:PB3

# EBB36 can toolhead END

# LCD START
# https://github.com/VoronDesign/Voron-Hardware/tree/master/V0_Display

[mcu display]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_110003000B43304747323720-if00
restart_method: command

[display]
lcd_type: sh1106
i2c_mcu: display
i2c_bus: i2c1a
# Set the direction of the encoder wheel
#   Standard: Right (clockwise) scrolls down or increases values. Left (counter-clockwise scrolls up or decreases values.
encoder_pins: ^display:PA3, ^display:PA4
#   Reversed: Right (clockwise) scrolls up or decreases values. Left (counter-clockwise scrolls down or increases values.
#encoder_pins: ^display:PA4, ^display:PA3
click_pin: ^!display:PA1
kill_pin: ^!display:PA5
x_offset: 3
#   Use X offset to shift the display towards the right. Value can be 0 to 3
#vcomh: 0
#   Set the Vcomh value on SSD1306/SH1106 displays. This value is
#   associated with a "smearing" effect on some OLED displays. The
#   value may range from 0 to 63. Default is 0.
#   Adjust this value if you get some vertical stripes on your display. (31 seems to be a good value)

[neopixel Display_Status]
pin: display:PA0
chain_count: 1
color_order: GRB
initial_RED: 0.25
initial_GREEN: 0.0
initial_BLUE: 0

# Disable OctoPrint menu on LCD
[menu __main __octoprint]
type: disabled

# LCD END


#####################################################################
#   Filament Runout Sensor
#####################################################################

[filament_switch_sensor filament_switch]
switch_pin: ^!PC2    # Use the correct pin for your mainboard.
pause_on_runout: False
runout_gcode: _FS_RUNOUT

# [filament_motion_sensor filament_motion]
# switch_pin: ^PC13    # Use the correct pin for your mainboard.
# extruder: extruder
# pause_on_runout: False
# detection_length: 2.88
# runout_gcode: _FS_RUNOUT

[respond]

[gcode_macro _FS_RUNOUT]
gcode:
  # M300 S660 P300  ; BEE
  # M300 S440 P300  ; BOOP
  RESPOND TYPE=error MSG="Filament Runout"  ; Display a message in the console
  M117 "Filament Runout"  ; Display a message on the LCD
  PAUSE   ; Call the pause macro

[gcode_macro _FS_ENABLE]
gcode:
  SET_FILAMENT_SENSOR SENSOR=filament_switch ENABLE=1
  # SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1  ; Uncomment this line if you are using the SFS V2

[gcode_macro _FS_DISABLE]
gcode:
  SET_FILAMENT_SENSOR SENSOR=filament_switch ENABLE=0
  # SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=0  ; Uncomment this line if you are using the SFS V2
  

# THESE ARE JUST EXAMPLES
# You should modify your own macros to include the calls to _FS_ENABLE and _FS_DISABLE

# [gcode_macro PRINT_START]
# gcode:
#     G28                            ; home all axes
#     G90                            ; absolute positioning    
#     G1 Z20 F3000                   ; move nozzle away from bed
#     _FS_ENABLE                     ; enable the filament runout sensor(s)


# [gcode_macro PRINT_END]
# gcode:
#     M400                           ; wait for buffer to clear
#     G92 E0                         ; zero the extruder
#     _FS_DISABLE                    ; disable the filament runout sensor(s)    
#     ; ... etc ...    
  

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  _FS_DISABLE
  CANCEL_PRINT_BASE


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
  _FS_DISABLE
  PAUSE_BASE
  

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  _FS_ENABLE
  RESUME_BASE  


#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    {% set HOME_CURRENT_RATIO = 0.5 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait for StallGuard registers to clear
    M400
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    {% set HOME_CURRENT_RATIO = 0.5 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait for StallGuard registers to clear
    M400
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    G90
    G28 Z
    G1 Z30

[homing_override]
axes: xyz
set_position_z: 0
gcode:
   G90
   G0 Z5 F600
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}

## To be used with BED_SCREWS_ADJUST
[bed_screws]
screw1: 60,5
screw1_name: front screw
screw2: 5,115
screw2_name: back left
screw3: 115,115
screw3_name: back right

#####################################################################
#   Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning.
  G28                   # Full home (XYZ)
  G90                   # Absolut position
  _FS_ENABLE
  
  # Bed heating
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
  G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
  M190 S{target_bed}                                  # Sets the target temp for the bed

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  G90                                              # Absolut position
  G0 X{x_wait - 50} Y1 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position
  SET_DISPLAY_TEXT
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-10} F3600          ; park nozzle at rear
    _FS_DISABLE
    
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
#gcode: